--- libarchive/configure.ac	2018-02-19 16:38:08.695232800 +0100
+++ libarchive/configure.ac.bcrypt	2018-04-05 14:54:08.593166900 +0200
@@ -296,7 +296,7 @@ AC_CHECK_HEADERS([sys/time.h sys/utime.h
 AC_CHECK_HEADERS([time.h unistd.h utime.h wchar.h wctype.h])
 AC_CHECK_HEADERS([windows.h])
 # check windows.h first; the other headers require it.
-AC_CHECK_HEADERS([wincrypt.h winioctl.h],[],[],
+AC_CHECK_HEADERS([bcrypt.h winioctl.h],[LIBS="-lbcrypt $LIBS"],[],
 [[#ifdef HAVE_WINDOWS_H
 # include <windows.h>
 #endif
@@ -1049,7 +1049,7 @@ AC_DEFUN([CRYPTO_CHECK_WIN], [
     AC_LINK_IFELSE([AC_LANG_SOURCE([
 #define ARCHIVE_$1_COMPILE_TEST
 #include <windows.h>
-#include <wincrypt.h>
+#include <bcrypt.h>
 
 int
 main(int argc, char **argv)
--- libarchive/libarchive/archive_random.c	2017-05-08 02:38:09.000000000 +0200
+++ libarchive/libarchive/archive_random.c.bcrypt	2018-04-05 14:54:08.601166200 +0200
@@ -58,8 +58,8 @@ static void arc4random_buf(void *, size_
 #include "archive.h"
 #include "archive_random_private.h"
 
-#if defined(HAVE_WINCRYPT_H) && !defined(__CYGWIN__)
-#include <wincrypt.h>
+#if defined(HAVE_BCRYPT_H) && !defined(__CYGWIN__)
+#include <bcrypt.h>
 #endif
 
 #ifndef O_CLOEXEC
@@ -74,20 +74,14 @@ static void arc4random_buf(void *, size_
 int
 archive_random(void *buf, size_t nbytes)
 {
-#if defined(_WIN32) && !defined(__CYGWIN__)
-	HCRYPTPROV hProv;
-	BOOL success;
-
-	success = CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_FULL,
-	    CRYPT_VERIFYCONTEXT);
-	if (!success && GetLastError() == (DWORD)NTE_BAD_KEYSET) {
-		success = CryptAcquireContext(&hProv, NULL, NULL,
-		    PROV_RSA_FULL, CRYPT_NEWKEYSET);
-	}
-	if (success) {
-		success = CryptGenRandom(hProv, (DWORD)nbytes, (BYTE*)buf);
-		CryptReleaseContext(hProv, 0);
-		if (success)
+#if defined(HAVE_BCRYPT_H) && !defined(__CYGWIN__)
+	BCRYPT_ALG_HANDLE algo_handle;
+	NTSTATUS ret = BCryptOpenAlgorithmProvider(&algo_handle, BCRYPT_RNG_ALGORITHM,
+	                                           MS_PRIMITIVE_PROVIDER, 0);
+	if (BCRYPT_SUCCESS(ret)) {
+		ret = BCryptGenRandom(algo_handle, buf, nbytes, 0);
+		BCryptCloseAlgorithmProvider(algo_handle, 0);
+		if (BCRYPT_SUCCESS(ret))
 			return ARCHIVE_OK;
 	}
 	/* TODO: Does this case really happen? */
